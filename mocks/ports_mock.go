// Code generated by MockGen. DO NOT EDIT.
// Source: core/ports/ports.go

// Package mock_ports is a generated GoMock package.
package mock_ports

import (
	reflect "reflect"

	domain "github.com/amcereijo/go-country-api/core/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockCountriesRepository is a mock of CountriesRepository interface.
type MockCountriesRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCountriesRepositoryMockRecorder
}

// MockCountriesRepositoryMockRecorder is the mock recorder for MockCountriesRepository.
type MockCountriesRepositoryMockRecorder struct {
	mock *MockCountriesRepository
}

// NewMockCountriesRepository creates a new mock instance.
func NewMockCountriesRepository(ctrl *gomock.Controller) *MockCountriesRepository {
	mock := &MockCountriesRepository{ctrl: ctrl}
	mock.recorder = &MockCountriesRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCountriesRepository) EXPECT() *MockCountriesRepositoryMockRecorder {
	return m.recorder
}

// GetAll mocks base method.
func (m *MockCountriesRepository) GetAll() ([]domain.Country, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]domain.Country)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockCountriesRepositoryMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockCountriesRepository)(nil).GetAll))
}

// SaveCountry mocks base method.
func (m *MockCountriesRepository) SaveCountry(country domain.Country) (domain.Country, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveCountry", country)
	ret0, _ := ret[0].(domain.Country)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveCountry indicates an expected call of SaveCountry.
func (mr *MockCountriesRepositoryMockRecorder) SaveCountry(country interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveCountry", reflect.TypeOf((*MockCountriesRepository)(nil).SaveCountry), country)
}

// MockCountriesService is a mock of CountriesService interface.
type MockCountriesService struct {
	ctrl     *gomock.Controller
	recorder *MockCountriesServiceMockRecorder
}

// MockCountriesServiceMockRecorder is the mock recorder for MockCountriesService.
type MockCountriesServiceMockRecorder struct {
	mock *MockCountriesService
}

// NewMockCountriesService creates a new mock instance.
func NewMockCountriesService(ctrl *gomock.Controller) *MockCountriesService {
	mock := &MockCountriesService{ctrl: ctrl}
	mock.recorder = &MockCountriesServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCountriesService) EXPECT() *MockCountriesServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockCountriesService) Create(name, capital string) (domain.Country, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", name, capital)
	ret0, _ := ret[0].(domain.Country)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockCountriesServiceMockRecorder) Create(name, capital interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCountriesService)(nil).Create), name, capital)
}

// GetAll mocks base method.
func (m *MockCountriesService) GetAll() ([]domain.Country, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]domain.Country)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockCountriesServiceMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockCountriesService)(nil).GetAll))
}
